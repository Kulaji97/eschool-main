/*
Deployment script for ESDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ESDB"
:setvar DefaultFilePrefix "ESDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[TblAttendance]...';


GO
CREATE TABLE [dbo].[TblAttendance] (
    [Id]             BIGINT        IDENTITY (1, 1) NOT NULL,
    [StudentId]      BIGINT        NOT NULL,
    [IsPresent]      BIT           NULL,
    [CreatedDate]    DATETIME      NULL,
    [IsActive]       BIT           NULL,
    [Date]           DATE          NULL,
    [MonthForSearch] NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TblBehaviour]...';


GO
CREATE TABLE [dbo].[TblBehaviour] (
    [Id]          INT            NOT NULL,
    [StudentId]   BIGINT         NULL,
    [behaviour1]  NVARCHAR (50)  NULL,
    [behaviour2]  NVARCHAR (50)  NULL,
    [behaviour3]  NVARCHAR (50)  NULL,
    [behaviour4]  NVARCHAR (50)  NULL,
    [behaviour5]  NVARCHAR (50)  NULL,
    [Description] NVARCHAR (100) NULL,
    [IsActive]    BIT            NULL,
    [CreatedDate] DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TblEvents]...';


GO
CREATE TABLE [dbo].[TblEvents] (
    [Id]        INT           NOT NULL,
    [EventName] NVARCHAR (50) NULL,
    [Date]      DATETIME      NULL,
    [Place]     NVARCHAR (50) NULL,
    [Time]      NVARCHAR (50) NULL,
    [IsActive]  BIT           NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TblStudentMarks]...';


GO
CREATE TABLE [dbo].[TblStudentMarks] (
    [Id]            INT           NOT NULL,
    [StudentId]     BIGINT        NULL,
    [Subject]       NVARCHAR (50) NULL,
    [PredictedMark] NVARCHAR (50) NULL,
    [IsActive]      BIT           NULL,
    [CreatedDate]   DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TblUserRegistration]...';


GO
CREATE TABLE [dbo].[TblUserRegistration] (
    [UserId]      BIGINT       IDENTITY (1, 1) NOT NULL,
    [Username]    VARCHAR (50) NULL,
    [Email]       VARCHAR (50) NULL,
    [Password]    VARCHAR (50) NULL,
    [Address]     VARCHAR (50) NULL,
    [MobileNo]    VARCHAR (15) NULL,
    [IsActive]    BIT          NULL,
    [UserType]    INT          NULL,
    [CreatedDate] DATETIME     NULL,
    [Grade]       INT          NULL,
    [IsPresent]   BIT          NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[TblAttendance]...';


GO
ALTER TABLE [dbo].[TblAttendance]
    ADD FOREIGN KEY ([StudentId]) REFERENCES [dbo].[TblUserRegistration] ([UserId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[TblBehaviour]...';


GO
ALTER TABLE [dbo].[TblBehaviour]
    ADD FOREIGN KEY ([StudentId]) REFERENCES [dbo].[TblUserRegistration] ([UserId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[TblStudentMarks]...';


GO
ALTER TABLE [dbo].[TblStudentMarks]
    ADD FOREIGN KEY ([StudentId]) REFERENCES [dbo].[TblUserRegistration] ([UserId]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3b245ea9-519c-4729-b372-747fe489fea3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3b245ea9-519c-4729-b372-747fe489fea3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f20bc5e5-f693-4ca5-8335-16459766bd0e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f20bc5e5-f693-4ca5-8335-16459766bd0e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '53970527-42f2-41fa-a5c2-4855805b2853')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('53970527-42f2-41fa-a5c2-4855805b2853')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '72b4866b-8af1-4cf3-b8de-808f10662ead')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('72b4866b-8af1-4cf3-b8de-808f10662ead')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6f8ae749-a580-4c86-b606-da18f2719e29')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6f8ae749-a580-4c86-b606-da18f2719e29')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4319da1d-634f-474f-9d56-e510cddebc58')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4319da1d-634f-474f-9d56-e510cddebc58')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '50de1c6f-70d6-4efa-b2b2-2e9aa7cd1f88')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('50de1c6f-70d6-4efa-b2b2-2e9aa7cd1f88')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '358f5707-75a1-4196-8cbc-1806fa1a8c30')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('358f5707-75a1-4196-8cbc-1806fa1a8c30')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7cc9936c-ca58-4365-8c72-0cf885a4e1bb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7cc9936c-ca58-4365-8c72-0cf885a4e1bb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3bd2330d-d7da-4aee-93a7-0d8d40525d85')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3bd2330d-d7da-4aee-93a7-0d8d40525d85')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9aee06fc-b9be-435b-a63d-0a06432625b2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9aee06fc-b9be-435b-a63d-0a06432625b2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ff7fefcc-0b68-4b9c-82f4-83b85fc9652c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ff7fefcc-0b68-4b9c-82f4-83b85fc9652c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd64c7fe1-784e-4d3d-bfd4-e13f7a42d5db')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d64c7fe1-784e-4d3d-bfd4-e13f7a42d5db')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
